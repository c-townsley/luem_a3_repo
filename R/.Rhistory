c(0.2,.4,.6,.8),
na.rm=T)),
name = "Mean Elevation\n(Quantile Breaks\nCategorical)") +
labs(title="Elevation in Calgary",
caption = "Source: CPLN 675") +
mapTheme
ggplot() +
geom_sf(data=calg_dat, aes(fill=factor(ntile(elevation_mean,4))),
colour=NA) +
scale_fill_manual(values = neutrals,
labels= as.character(round(quantile(calg_dat$elevation_mean),
c(0.2,.4,.6,.8),
na.rm=T), 2)),
ggplot() +
geom_sf(data=calg_dat, aes(fill=factor(ntile(elevation_mean,4))),
colour=NA) +
scale_fill_manual(values = neutrals,
labels= as.character(round(quantile(calg_dat$elevation_mean,
c(0.2,.4,.6,.8),
na.rm=T), 2)),
name = "Mean Elevation\n(Quantile Breaks\nCategorical)") +
labs(title="Elevation in Calgary",
caption = "Source: CPLN 675") +
mapTheme
denver_dat <- denver_dat %>%
st_transform(crs = 2232)
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(streamdist_min,4))),
colour=NA) +
scale_fill_manual(values = yellows,
labels= as.character(round(quantile(denver_dat$streamdist_min),
c(0.2,.4,.6,.8),
na.rm=T)),
name = "Distance\n(Quantile Breaks\n in Metres)") +
labs(title="Distance from Rivers in Denver",
subtitle="Based on Denver Hydrology Data",
caption = "Source: Denver Open Data Catalog") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(streamdist_min,4))),
colour=NA) +
scale_fill_manual(values = yellows,
labels= as.character(round(quantile(denver_dat$streamdist_min),
c(0.2,.4,.6,.8),
na.rm=T),2),
name = "Distance\n(Quantile Breaks\n in Metres)") +
labs(title="Distance from Rivers in Denver",
subtitle="Based on Denver Hydrology Data",
caption = "Source: Denver Open Data Catalog") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(streamdist_min,4))),
colour=NA) +
scale_fill_manual(values = yellows,
labels= as.character(round(quantile(denver_dat$streamdist_min),
c(0.2,.4,.6,.8),
na.rm=T), 3),
name = "Distance\n(Quantile Breaks\n in Metres)") +
labs(title="Distance from Rivers in Denver",
subtitle="Based on Denver Hydrology Data",
caption = "Source: Denver Open Data Catalog") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(streamdist_min,4))),
colour=NA) +
scale_fill_manual(values = yellows,
labels= as.character(round(quantile(denver_dat$streamdist_min,
c(0.2,.4,.6,.8),
na.rm=T), 2)),
name = "Distance\n(Quantile Breaks\n in Metres)") +
labs(title="Distance from Rivers in Denver",
subtitle="Based on Denver Hydrology Data",
caption = "Source: Denver Open Data Catalog") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(streamdist_min,4))),
colour=NA) +
scale_fill_manual(values = yellows,
labels= as.character(round(quantile(denver_dat$streamdist_min,                                                    c(0.2,.4,.6,.8),
na.rm=T), 2)),
name = "Distance\n(Quantile Breaks\n in Metres)") +
labs(title="Distance from Rivers in Denver",
subtitle="Based on Denver Hydrology Data",
caption = "Source: Denver Open Data Catalog") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(flowac_mean,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels= as.character(round(quantile(denver_dat$flowac_mean,
c(0.2,.4,.6,.8),
na.rm=T))),
name = "Mean Flow\nAccumulation\n(Quantile Breaks)") +
labs(title="Precipitation Flow Accumulation in Denver",
subtitle="Based on Denver Elevation Data",
caption = "Source: webgis.com") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(pervious_mean,4))),
colour=NA) +
scale_fill_manual(values = greens,
labels= as.character(round(quantile(denver_dat$pervious_mean,
c(0.2,.4,.6,.8),
na.rm=T), 2)),
name = "Permeable\nSurface\n(Quantile\nBreaks)") +
labs(title="Permeable Surface in Denver",
subtitle="Based on Denver Land Cover Data",
caption = "Source: Denver Regional Council of Governments Regional Data Catalog") +
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(elevation_mean,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_dat$elevation_mean,
c(0.2,.4,.6,.8),
na.rm=T)),
name = "Elevation in Metres\n(Quantile\nBreaks)") +
geom_sf(data=denver_dat, aes(fill=factor(ntile(elevation_median,4))),
colour=NA) +
scale_fill_manual(values = neutrals,
labels= as.character(round(quantile(denver_dat$flowac_mean,
c(0.2,.4,.6,.8),
na.rm=T))),
name = "Mean Elevation\n(Quantile Breaks\nCategorical)") +
labs(title="Elevation in Denver",
caption = "Source: webgis.com") +
mapTheme
mapTheme
ggplot() +
geom_sf(data=denver_dat, aes(fill=factor(ntile(elevation_mean,4))),
colour=NA) +
scale_fill_manual(values = neutrals,
labels= as.character(round(quantile(denver_dat$elevation_mean,
c(0.2,.4,.6,.8),
na.rm=T))),
name = "Mean Elevation\n(Quantile Breaks\nCategorical)") +
labs(title="Elevation in Denver",
caption = "Source: webgis.com") +
mapTheme
calg_PlotVariables <- calg_dat %>%
as.data.frame() %>%
dplyr::select(inund_sum, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log) %>%
pivot_longer(cols = -inund_sum)
#violin plots
#change code for for calgary_dat
##use boxplots with scatter points to visualize the spread of data?
ggplot(calg_PlotVariables) +
geom_violin(aes(x = as.factor(inund_sum),
y = value, fill = as.factor(inund_sum))) +
facet_wrap(~name, scales = "free_y") +
labs(x="Inundated", y="Value") +
scale_fill_manual(values = c("#CEEBF0", "#51A6AE"),
labels = c("Not Inundated","Inundated"), name = "") +
labs(x="Inundated", y="Value") +
plotTheme
##facet_wrap - one ggplot recipe for each variable
###use scales = free or free_y to plot values that are comparatively lower or higher
calg_inund_fishnet <- calg_dat %>%
filter(inund_sum == 1)
no_fishnets <-(509/5373)*100
set.seed(3456)
trainIndex <- createDataPartition(calg_dat$elevation_mean, p = .70,
list = FALSE,
times = 1)
inundTrain <- calg_dat[ trainIndex,] %>%
dplyr::select(-flowac_mean, -streamdist_min)
inundTest  <- calg_dat[-trainIndex,]%>%
dplyr::select(-flowac_mean, -streamdist_min)
##the sets are randomly generated
##p=0.70 indicates the 70/30 partition
corr <- calg_dat %>%
as.data.frame() %>%
dplyr::select(inund_sum, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log) %>%
rename("Distance to Stream (log)" = streamdist_min_log,
"Flow Accumulation (log)" = flowac_mean_log,
"Elevation" = elevation_mean,
"Land Porosity" = pervious_mean,
"Inundation (observed)" = inund_sum)
calg_matrix = cor(corr)
ggcorrplot(calg_matrix, method="square", colors = c("#73BBBF", "#FDF4E9", "#92AF7E"),
tl.cex=7)
inundModel <- glm(inund_sum ~ .,
family="binomial"(link="logit"), data = inundTrain %>%
as.data.frame() %>%
dplyr::select(-geometry, -uniqueID))
summary(inundModel)
## % change in Y for unit change in X = [(exponent (coefficient of X) - 1)] * 100
## - or + sign indicates associated increase or decrease
inundModel$coefficients
inundModel_vars <- c("Land Porosity", "Elevation", "Flow Accumulation (log)", "Distance to Stream (log)")
inundModel_coeffs <- c(((exp(-0.3648453 ) - 1) * 100), ((exp(-0.6357177) - 1) * 100), ((exp(0.1009900) - 1) * 100), ((exp( -0.5288784) - 1) * 100))
inundModel_coefficients <- data.frame(inundModel_vars, inundModel_coeffs)
inundModel_coefficients %>%
kbl(caption = "Exponentiated Coefficients: Logistic Regression Model 1") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
inundTrain_2 <- calg_dat[ trainIndex,] %>%
dplyr::select(-flowac_mean, -streamdist_min, -pervious_mean)
inundTest_2  <- calg_dat[-trainIndex,]%>%
dplyr::select(-flowac_mean, -streamdist_min, -pervious_mean)
inundModel_2 <- glm(inund_sum ~ .,
family="binomial"(link="logit"), data = inundTrain_2 %>%
as.data.frame() %>%
dplyr::select(-geometry, -uniqueID))
summary(inundModel_2)
## % change in Y for unit change in X = [(exponent (coefficient of X) - 1)] * 100
## - or + sign indicates associated increase or decrease
inundModel_2$coefficients
inundModel2_vars <- c("Elevation", "Flow Accumulation (log)", "Distance to Stream (log)")
inundModel2_coeffs <- c(((exp(-0.6243868) - 1) * 100), ((exp(0.1009589) - 1) * 100), ((exp(-0.5192783) - 1) * 100))
inundModel2_coefficients <- data.frame(inundModel2_vars, inundModel2_coeffs)
inundModel2_coefficients %>%
kbl(caption = "Exponentiated Coefficients: Logistic Regression Model 2") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
inundTrain_3 <- calg_dat[ trainIndex,] %>%
dplyr::select(-flowac_mean_log, -streamdist_min_log)
inundTest_3  <- calg_dat[-trainIndex,]%>%
dplyr::select(-flowac_mean_log, -streamdist_min_log)
inundModel_3 <- glm(inund_sum ~ .,
family="binomial"(link="logit"), data = inundTrain_3 %>%
as.data.frame() %>%
dplyr::select(-geometry, -uniqueID))
summary(inundModel_3)
## % change in Y for unit change in X = [(exponent (coefficient of X) - 1)] * 100
## - or + sign indicates associated increase or decrease
inundModel_3$coefficients
inundModel3_vars <- c("Land Porosity", "Elevation", "Flow Accumulation", "Distance to Stream")
inundModel3_coeffs <- c(((exp(0.0479009901) - 1) * 100), ((exp(-0.4802761173) - 1) * 100), ((exp(0.0001509916) - 1) * 100), ((exp(-0.0046012831) - 1) * 100))
inundModel3_coefficients <- data.frame(inundModel3_vars, inundModel3_coeffs)
inundModel3_coefficients %>%
kbl(caption = "Exponentiated Coefficients: Logistic Regression Model 2") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
classProbs <- predict(inundModel, inundTest, type="response")
hist(classProbs)
##histogram is for the whole dataset
##represents the probability that a cell will be inundated (x-axis), vs number of cells with that probability (y-axis)
testProbs <- data.frame(obs = as.numeric(inundTest$inund_sum),
pred = classProbs)
ggplot(testProbs, aes(x = pred, fill=as.factor(obs))) +
geom_density() +
facet_grid(obs ~ .) +
xlab("Probability") +
ylab("Frequency") +
geom_vline(xintercept = .5) +
scale_fill_manual(values = c("#CEEBF0", "#51A6AE"),
labels = c("Not Inundated","Inundated")) +
labs(title = "Number of Fishnet Cells Associated with Flooding in Calgary")+
plotTheme
testProbs$predClass  = ifelse(testProbs$pred > .5 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
testProbs$predClass75  = ifelse(testProbs$pred > .75 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass75),
positive = "1")
testProbs$predClass25  = ifelse(testProbs$pred > .25 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass25),
positive = "1")
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
auc(testProbs$obs, testProbs$pred)
ctrl <- trainControl(method = "cv",
number = 100,
savePredictions = TRUE)
inundFit <- train(as.factor(inund_sum) ~ .,
data = calg_dat %>%
as.data.frame() %>%
dplyr::select(inund_sum, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log),
method="glm", family="binomial",
trControl = ctrl)
inundFit
#inundFit is our model trained to predict using the binomial logistic regression, or glm, method.
ggplot(as.data.frame(inundFit$resample), aes(Accuracy)) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Accuracy",
y="Count")+
plotTheme
calg_dat_log <- calg_dat %>%
dplyr::select(uniqueID, inund_sum, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log, geometry)
allPredictions <-
predict(inundFit, calg_dat, type="prob")[,2]
calg_pred <-
cbind(calg_dat_log,allPredictions) %>%
mutate(allPredictions = round(allPredictions * 100))
ggplot() +
geom_sf(data=calg_pred, aes(fill=factor(ntile(allPredictions,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(calg_pred$allPredictions,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Flood Inundation in Calgary")
ggplot() +
geom_sf(data=calg_pred, aes(fill=factor(ntile(allPredictions,4))), colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(calg_pred$allPredictions,
c(.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
geom_sf(data=calg_pred  %>%
filter(inund_sum == 1),
fill="#EDBA46", alpha=0.9, colour=NA) +
geom_sf(data=calg_pred %>%
filter(inund_sum == 0),
fill="#F9E2B2", alpha=0.35,colour=NA) +
mapTheme +
labs(title="Observed and Predicted Flood Inundation Areas",
subtitle="Yellow marks areas with observed 'inundation', \nall other taken as 'not inundated' for the purpose of binary regression modeling")
calg_pred %>%
mutate(confResult=case_when(allPredictions < 50 & inund_sum==0 ~ "True Negative",
allPredictions >= 50 & inund_sum==1 ~ "True Positive",
allPredictions < 50 & inund_sum==1 ~ "False Negative",
allPredictions >= 50 & inund_sum==0 ~ "False Positive")) %>%
ggplot()+
geom_sf(aes(fill = confResult), color = "transparent")+
scale_fill_manual(values = c("#B0B0B3","#A2D3D8","#FFEFDE","#81996F"),
name="Outcomes")+
labs(title="Confusion Metrics") +
mapTheme
denver_dat_log <- denver_dat %>%
dplyr::select(uniqueID, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log, geometry)
allPredictions_denver <-
predict(inundFit, denver_dat_log, type="prob")[,2]
denver_pred <-
cbind(denver_dat_log, allPredictions_denver) %>%
mutate(allPredictions_denver = round(allPredictions_denver * 100))
ggplot() +
geom_sf(data=denver_pred, aes(fill=factor(ntile(allPredictions_denver,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_pred$allPredictions_denver,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Flood Inundation in Denver",
subtitle="Based on a Logistic Regression Model trained on data from Calgary\n",
caption = "Source: blah blah blah")
denver_hydro <- read_sf("Denver/Raw/streams/streams.shp")
ggplot() +
geom_sf(data=denver_pred, aes(fill=factor(ntile(allPredictions_denver,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_pred$allPredictions_denver,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quantile\nBreaks)") +
geom_sf(data=denver_hydro, color="#EDB025", size=35, linejoin="round", lineend="round") +
labs(title="Predicted Probability of Flood Inundation in Denver",
subtitle="Based on a Logistic Regression Model trained on data from Calgary\nYellow Lines Mark Location of Existing Rivers & Streams",
caption = "Source: blah blah blah") +
mapTheme
calg_PlotVariables <- calg_dat %>%
as.data.frame() %>%
dplyr::select(inund_sum, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log) %>%
pivot_longer(cols = -inund_sum)
#violin plots
#change code for for calgary_dat
##use boxplots with scatter points to visualize the spread of data?
ggplot(calg_PlotVariables) +
geom_violin(aes(x = as.factor(inund_sum),
y = value, fill = as.factor(inund_sum))) +
facet_wrap(~name, scales = "free_y") +
labs(x="Inundated", y="Value") +
scale_fill_manual(values = c("#CEEBF0", "#51A6AE"),
labels = c("Not Inundated","Inundated"), name = "") +
labs(x="Inundated", y="Value") +
plotTheme
##facet_wrap - one ggplot recipe for each variable
###use scales = free or free_y to plot values that are comparatively lower or higher
calg_inund_fishnet <- calg_dat %>%
filter(inund_sum == 1)
no_fishnets <-(509/5373)*100
set.seed(3456)
trainIndex <- createDataPartition(calg_dat$elevation_mean, p = .70,
list = FALSE,
times = 1)
inundTrain <- calg_dat[ trainIndex,] %>%
dplyr::select(-flowac_mean, -streamdist_min)
inundTest  <- calg_dat[-trainIndex,]%>%
dplyr::select(-flowac_mean, -streamdist_min)
##the sets are randomly generated
##p=0.70 indicates the 70/30 partition
inundTrain_2 <- calg_dat[ trainIndex,] %>%
dplyr::select(-flowac_mean, -streamdist_min, -pervious_mean)
inundTest_2  <- calg_dat[-trainIndex,]%>%
dplyr::select(-flowac_mean, -streamdist_min, -pervious_mean)
inundModel_2 <- glm(inund_sum ~ .,
family="binomial"(link="logit"), data = inundTrain_2 %>%
as.data.frame() %>%
dplyr::select(-geometry, -uniqueID))
summary(inundModel_2)
## % change in Y for unit change in X = [(exponent (coefficient of X) - 1)] * 100
## - or + sign indicates associated increase or decrease
inundModel$coefficients
inundModel_vars <- c("Land Porosity", "Elevation", "Flow Accumulation (log)", "Distance to Stream (log)")
inundModel_coeffs <- c(((exp(-0.3648453 ) - 1) * 100), ((exp(-0.6357177) - 1) * 100), ((exp(0.1009900) - 1) * 100), ((exp( -0.5288784) - 1) * 100))
inundModel_coefficients <- data.frame(inundModel_vars, inundModel_coeffs)
inundModel_coefficients %>%
kbl(caption = "Exponentiated Coefficients: Logistic Regression Model 1") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
ggplot() +
geom_sf(data=denver_pred, aes(fill=factor(ntile(allPredictions_denver,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_pred$allPredictions_denver,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Flood Inundation in Denver",
subtitle="Based on a Logistic Regression Model trained on data from Calgary\n")
ggplot() +
geom_sf(data=calg_pred, aes(fill=factor(ntile(allPredictions,4))), colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(calg_pred$allPredictions,
c(.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuintile\nBreaks)") +
geom_sf(data=calg_pred  %>%
filter(inund_sum == 1),
fill="#EDBA46", alpha=0.9, colour=NA) +
geom_sf(data=calg_pred %>%
filter(inund_sum == 0),
fill="#F9E2B2", alpha=0.35,colour=NA) +
mapTheme +
labs(title="Observed and Predicted Flood Inundation Areas",
subtitle="Yellow marks areas with observed 'inundation', \nall other taken as 'not inundated' for the purpose of binary regression modeling")
ggplot() +
geom_sf(data=calg_pred, aes(fill=factor(ntile(allPredictions,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(calg_pred$allPredictions,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Flood Inundation in Calgary")
ggplot() +
geom_sf(data=calg_pred, aes(fill=factor(ntile(allPredictions,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(calg_pred$allPredictions,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Flood Inundation in Calgary",
subtitle = "Based on a Logistic Regression Model")
denver_hydro <- read_sf("Denver/Raw/streams/streams.shp")
ggplot() +
geom_sf(data=denver_pred, aes(fill=factor(ntile(allPredictions_denver,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_pred$allPredictions_denver,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quantile\nBreaks)") +
geom_sf(data=denver_hydro, color="#EDB025", size=35, linejoin="round", lineend="round") +
labs(title="Predicted Probability of Flood Inundation in Denver",
subtitle="Based on a Logistic Regression Model trained on data from Calgary\nYellow Lines Mark Location of Existing Rivers & Streams",
caption = "Source: blah blah blah") +
mapTheme
calg_pred %>%
mutate(confResult=case_when(allPredictions < 50 & inund_sum==0 ~ "True Negative",
allPredictions >= 50 & inund_sum==1 ~ "True Positive",
allPredictions < 50 & inund_sum==1 ~ "False Negative",
allPredictions >= 50 & inund_sum==0 ~ "False Positive")) %>%
ggplot()+
geom_sf(aes(fill = confResult), color = "transparent")+
scale_fill_manual(values = c("#B0B0B3","#A2D3D8","#FFEFDE","#81996F"),
name="Outcomes")+
labs(title="Confusion Metrics") +
mapTheme
denver_dat_log <- denver_dat %>%
dplyr::select(uniqueID, pervious_mean, elevation_mean, flowac_mean_log, streamdist_min_log, geometry)
allPredictions_denver <-
predict(inundFit, denver_dat_log, type="prob")[,2]
denver_pred <-
cbind(denver_dat_log, allPredictions_denver) %>%
mutate(allPredictions_denver = round(allPredictions_denver * 100))
ggplot() +
geom_sf(data=denver_pred, aes(fill=factor(ntile(allPredictions_denver,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_pred$allPredictions_denver,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Grouped in\nQuantile\nBreaks)") +
mapTheme +
labs(title="Predicted Probability of Flood Inundation in Denver",
subtitle="Based on a Logistic Regression Model trained on data from Calgary\n")
denver_hydro <- read_sf("Denver/Raw/streams/streams.shp")
ggplot() +
geom_sf(data=denver_pred, aes(fill=factor(ntile(allPredictions_denver,4))),
colour=NA) +
scale_fill_manual(values = blues,
labels=as.character(quantile(denver_pred$allPredictions_denver,
c(0.2,.4,.6,.8),
na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quantile\nBreaks)") +
geom_sf(data=denver_hydro, color="#EDB025", size=35, linejoin="round", lineend="round") +
labs(title="Predicted Probability of Flood Inundation in Denver",
subtitle="Based on a Logistic Regression Model trained on data from Calgary\nYellow Lines Mark Location of Existing Rivers & Streams",
caption = "Source: blah blah blah") +
mapTheme
